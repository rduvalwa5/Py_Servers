+https://docs.python.org/3/library/socket.html


https://docs.python.org/3/library/socketserver.html#module-socketserver
	- The socketserver module simplifies the task of writing network servers.
	
21.21. 	socketserver — A framework for network servers
		https://hg.python.org/cpython/file/3.5/Lib/socketserver.py
		
		
21.21.4. Examples
	21.21.4.1. socketserver.TCPServer Example
	The server side:
-----------------------------------------
import socketserver

class MyTCPHandler(socketserver.BaseRequestHandler):
    """
    The request handler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.
    """

    def handle(self):
        # self.request is the TCP socket connected to the client
        self.data = self.request.recv(1024).strip()
        print("{} wrote:".format(self.client_address[0]))
        print(self.data)
        # just send back the same data, but upper-cased
        self.request.sendall(self.data.upper())

if __name__ == "__main__":
    HOST, PORT = "localhost", 9999

    # Create the server, binding to localhost on port 9999
    server = socketserver.TCPServer((HOST, PORT), MyTCPHandler)

    # Activate the server; this will keep running until you
    # interrupt the program with Ctrl-C
    server.serve_forever()
----------------------------------------------    
    
An alternative request handler class that makes use of streams (file-like objects that simplify communication by providing the standard file interface):

class MyTCPHandler(socketserver.StreamRequestHandler):

    def handle(self):
        # self.rfile is a file-like object created by the handler;
        # we can now use e.g. readline() instead of raw recv() calls
        self.data = self.rfile.readline().strip()
        print("{} wrote:".format(self.client_address[0]))
        print(self.data)
        # Likewise, self.wfile is a file-like object used to write back
        # to the client
        self.wfile.write(self.data.upper())
The difference is that the readline() call in the second handler will call recv() multiple times until it encounters a newline character, while the single recv() call in the first handler will just return what has been sent from the client in one sendall() call.

This is the client side:

import socket
import sys

HOST, PORT = "localhost", 9999
data = " ".join(sys.argv[1:])

# Create a socket (SOCK_STREAM means a TCP socket)
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    # Connect to server and send data
    sock.connect((HOST, PORT))
    sock.sendall(bytes(data + "\n", "utf-8"))

    # Receive data from the server and shut down
    received = str(sock.recv(1024), "utf-8")

print("Sent:     {}".format(data))
print("Received: {}".format(received))
The output of the example should look something like this:

Server:

$ python TCPServer.py
127.0.0.1 wrote:
b'hello world with TCP'
127.0.0.1 wrote:
b'python is nice'
Client:

$ python TCPClient.py hello world with TCP
Sent:     hello world with TCP
Received: HELLO WORLD WITH TCP
$ python TCPClient.py python is nice
Sent:     python is nice
Received: PYTHON IS NICE

*** Aug 28 2016

18.1. socket — Low-level networking interface
	Source code: Lib/socket.py
	module provides access to the BSD socket interface
	- available on all modern Unix systems, Windows, MacOS

	Note behavior platform dependent
		- calls are made to the operating system socket APIs
		- Python interface is a straightforward transliteration of the Unix system call 
		  and library interface for sockets to Python’s object-oriented style: the socket() function
		  returns a socket object whose methods implement the various socket system calls. 
		  Parameter types are somewhat higher-level than in the C interface with :
		   read() and write() operations on Python files, 
		   buffer allocation on receive operations is automatic
		   buffer length is implicit on send operations
		   
18.1.1. Socket families
	various socket families are supported by this module:
		- address format required by a particular socket object automatically selected based 
		  on the address family specified when the socket object was created. 
	Socket addresses are represented as follows:
	1. address of an AF_UNIX socket bound to a file system node is represented as a string,
	   using the file system encoding and the 'surrogateescape' error handler (see PEP 383). 
	   An address in Linux’s abstract namespace is returned as a bytes-like object with an initial null byte;
       note that sockets in this namespace can communicate with normal file system sockets, so programs intended 
       to run on Linux may need to deal with both types of address. 
       A string or bytes-like object can be used for either type of address when passing it as an argument.

		Changed in version 3.3:
	   	Previously, AF_UNIX socket paths were assumed to use UTF-8 encoding.
		Changed in version 3.5: 
		Writable bytes-like object is now accepted.

	2. pair (host, port) is used for the AF_INET address family
		 where host is a string representing either a hostname in Internet domain notation 
		 like 'daring.cwi.nl' or an IPv4 address like '100.50.200.5', and port is an integer.

	3. AF_INET6 address family, 
		a four-tuple (host, port, flowinfo, scopeid) used
			where flowinfo and scopeid represent the sin6_flowinfo 
			and sin6_scope_id members in struct sockaddr_in6 in C. 
		b. socket module methods, flowinfo and scopeid can be omitted just for backward compatibility

		Note, however, omission of scopeid can cause problems in manipulating scoped IPv6 addresses.

	4. AF_NETLINK sockets are represented as pairs (pid, groups).
		a. Linux-only support for TIPC is available using the AF_TIPC address family
		b. TIPC is an open, non-IP based networked protocol designed for use in clustered computer
		   environments. 
		   - Addresses are represented by a tuple, and the fields depend on the address type. 
		   The general tuple form is (addr_type, v1, v2, v3 [, scope]), where:
			addr_type:	 one of TIPC_ADDR_NAMESEQ, TIPC_ADDR_NAME, or TIPC_ADDR_ID
			scope:		 one of TIPC_ZONE_SCOPE, TIPC_CLUSTER_SCOPE, and TIPC_NODE_SCOPE

			If addr_type is TIPC_ADDR_NAME, 
				then 
				v1 is the server type
				v2 is the port identifier
				v3 should be 0

			If addr_type is TIPC_ADDR_NAMESEQ, 
				then 
				v1 is the server type
				v2 is the lower port number
				v3 is the upper port number

			If addr_type is TIPC_ADDR_ID
				then 
				v1 is the node
				v2 is the reference
				v3 should be set to 0

	5.  A tuple (interface, ) used for the AF_CAN address family
		  a. where interface is a string representing a network interface name like 'can0'
		  b. network interface name '' can be used to receive packets from all network interfaces
			 of this family.

	6.  A string or a tuple (id, unit) is used for the SYSPROTO_CONTROL protocol of the PF_SYSTEM family
		  a. string is the name of a kernel control using a dynamically-assigned ID
		  b. tuple can be used if ID and unit number of the kernel control are known 
		     or if a registered ID is used

    New in version 3.3.

	7.  AF_BLUETOOTH supports following protocols and address formats:
		  a. BTPROTO_L2CAP accepts (bdaddr, psm) where bdaddr is the Bluetooth address as a string 
		     and psm is an integer
		  b. BTPROTO_RFCOMM accepts (bdaddr, channel) where bdaddr is the Bluetooth address as a string
		     and channel is an integer
		  c. BTPROTO_HCI accepts (device_id,) where device_id is either an integer or a string with the 
		     Bluetooth address of the interface. 
		     (This depends on your OS; NetBSD and DragonFlyBSD expect a Bluetooth address while everything else expects an integer.)

	Changed in version 3.2: NetBSD and DragonFlyBSD support added.

	8.  BTPROTO_SCO accepts bdaddr where bdaddr is a bytes object containing the Bluetooth address in a string format. 
	    (ex. b'12:23:34:45:56:67') 
	    a. This protocol is not supported under FreeBSD.

	9. other address families (AF_PACKET, AF_CAN) support specific representations

	10. IPv4 addresses
		a.  two special forms are accepted instead of a host address:
		    - the empty string represents INADDR_ANY, 
    		- the string '<broadcast>' represents INADDR_BROADCAST. 
    	b.  This behavior is not compatible with IPv6, therefore, you may want to avoid these 
    	    if you intend to support IPv6 with your Python programs.

	11. If you use a hostname in the host portion of IPv4/v6 socket address
		-  the program may show a nondeterministic behavior, as Python uses the first address returned from the DNS resolution
		-  socket address will be resolved differently into an actual IPv4/v6 address, depending on the results from DNS resolution 
		   and/or the host configuration. 
		-  For deterministic behavior use a numeric address in host portion.

	12. All errors raise exceptions
		- normal exceptions for invalid argument types and out-of-memory conditions can be raised;
		  starting from Python 3.3, 
		  errors related to socket or address semantics raise OSError or one of its subclasses (they used to raise socket.error).

	13. Non-blocking mode is supported through setblocking(). 
	    A generalization of this based on timeouts is supported through settimeout().

18.1.2. Module contents
	The module socket exports the following elements.
	18.1.2.1. Exceptions
		exception socket.error
		A deprecated alias of OSError.
		Changed in version 3.3: Following PEP 3151, this class was made an alias of OSError.

	exception socket.herror
		subclass of OSError 
		exception is raised for address-related errors
		 i.e. for functions that use h_errno in the POSIX C API, including gethostbyname_ex() and 
		 gethostbyaddr(). 
		 The accompanying value is a pair (h_errno, string) representing an error returned 
		 by a library call. h_errno is a numeric value, while string represents the description of h_errno,
		 as returned by the hstrerror() C function.
		 Changed in version 3.3: This class was made a subclass of OSError.

	exception socket.gaierror
		subclass of OSError,
		exception is raised for address-related errors by getaddrinfo() and getnameinfo()
		The accompanying value is a pair (error, string) representing an error returned by a 
		library call. string represents the description of error, as returned by the gai_strerror()
		C function. The numeric error value will match one of the EAI_* constants defined in this module.
		Changed in version 3.3: This class was made a subclass of OSError.

	exception socket.timeout
		subclass of OSError
		exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior 
		call to settimeout() (or implicitly through setdefaulttimeout()). 
		The accompanying value is a string whose value is currently always “timed out”.
		Changed in version 3.3: This class was made a subclass of OSError.

  
18.1.2.2. Constants
	AF_* and SOCK_* constants are now AddressFamily and SocketKind IntEnum collections.

	New in version 3.4.
  1. used for the first argument to socket()
	 represent the address (and protocol) families
	 If the AF_UNIX constant is not defined then this protocol is unsupported
	 
	socket.AF_UNIX
	socket.AF_INET
	socket.AF_INET6

  2. used for the second argument to socket()
	 represent the socket types
	 More constants may be available depending on the system. 
	 (Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)
	
	socket.SOCK_STREAM
	socket.SOCK_DGRAM
	socket.SOCK_RAW
	socket.SOCK_RDM
	socket.SOCK_SEQPACKET

  3.  constants, if defined can be combined with the socket types 
      and allow you to set some flags atomically 
      (thus avoiding possible race conditions and the need for separate calls).

	socket.SOCK_CLOEXEC
	socket.SOCK_NONBLOCK

	New in version 3.2.
  4. constants of these forms, 
     - documented in the Unix documentation on sockets and/or the IP protocol
     - also defined in the socket module
     - used in arguments to the setsockopt() and getsockopt() methods of socket objects
     - most cases, only those symbols that are defined in the Unix header files are defined;
       for a few symbols, default values are provided

	SO_*
	socket.SOMAXCONN
	MSG_*
	SOL_*
	SCM_*
	IPPROTO_*
	IPPORT_*
	INADDR_*
	IP_*
	IPV6_*
	EAI_*
	AI_*
	NI_*
	TCP_*

  5. constants of these forms
     - documented in the Linux documentation
     - also defined in the socket module.
     - See also Secure File Descriptor Handling for a more thorough explanation
     - Availability: Linux >= 2.6.25.
     
	socket.AF_CAN
	socket.PF_CAN
	SOL_CAN_*
	CAN_*


New in version 3.3.

  6. in the CAN protocol family
      - the broadcast manager (BCM) protocol
      - Broadcast manager constants, documented in the Linux documentation, are also defined in the socket module.
	  - Availability: Linux >= 2.6.25.

	socket.CAN_BCM
	CAN_BCM_*
	CAN_BCM, 

New in version 3.4.

  7. Enables CAN FD support in a CAN_RAW socket
     - is disabled by default
     - allows your application to send both CAN and CAN FD frames
     - however must accept both CAN and CAN FD frames when reading from the socket
	 - documented in the Linux documentation
	-  Availability: Linux >= 3.6.
  
	socket.CAN_RAW_FD_FRAMES

New in version 3.5.

  8. Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.
	 Availability: Linux >= 2.6.30.
	  
	socket.AF_RDS
	socket.PF_RDS
	socket.SOL_RDS
	RDS_*


New in version 3.3.

  9. Constants for Windows’ WSAIoctl(). The constants are used as arguments to the ioctl() method of socket objects.
   
	SIO_*
	RCVALL_*

 10. TIPC related constants, matching the ones exported by the C socket API. See the TIPC documentation for more information.
 	TIPC_*

	socket.AF_LINK
	Availability: BSD, OSX.

New in version 3.4.

socket.has_ipv6
This constant contains a boolean value which indicates if IPv6 is supported on this platform.

socket.BDADDR_ANY
socket.BDADDR_LOCAL
These are string constants containing Bluetooth addresses with special meanings. For example, BDADDR_ANY can be used to indicate any address when specifying the binding socket with BTPROTO_RFCOMM.

socket.HCI_FILTER
socket.HCI_TIME_STAMP
socket.HCI_DATA_DIR
For use with BTPROTO_HCI. HCI_FILTER is not available for NetBSD or DragonFlyBSD. HCI_TIME_STAMP and HCI_DATA_DIR are not available for FreeBSD, NetBSD, or DragonFlyBSD.

18.1.2.3. Functions
	18.1.2.3.1. Creating sockets

	socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)
	socket.socketpair([family[, type[, proto]]])
	socket.create_connection(address[, timeout[, source_address]])
	socket.fromfd(fd, family, type, proto=0)
	socket.fromshare(data)
	socket.SocketType

18.1.2.3.2. Other functions
	socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)
	socket.getfqdn([name])
	socket.gethostbyname(hostname)
	socket.gethostbyname_ex(hostname)
	socket.gethostname()
	socket.gethostbyaddr(ip_address)
	socket.getnameinfo(sockaddr, flags)
	socket.getprotobyname(protocolname)
	socket.getservbyname(servicename[, protocolname])
	socket.getservbyport(port[, protocolname])
	socket.ntohl(x)
	socket.ntohs(x)
	socket.htonl(x)
	socket.htons(x)
	socket.inet_aton(ip_string)
	socket.inet_ntoa(packed_ip)
	socket.inet_pton(address_family, ip_string)
	socket.inet_ntop(address_family, packed_ip)
	socket.CMSG_LEN(length)
	socket.CMSG_SPACE(length)
	socket.getdefaulttimeout()
	socket.setdefaulttimeout(timeout)
	socket.sethostname(name)
	socket.if_nameindex()
	socket.if_nametoindex(if_name)
	socket.if_indextoname(if_index)

18.1.3. Socket Objects
	Socket objects have the following methods. 
	Except for makefile(), these correspond to Unix system calls applicable to sockets.

		socket.accept()
		socket.bind(address)
		socket.close()
		socket.connect_ex(address)
		socket.detach()
		socket.dup()
		socket.fileno()
		socket.get_inheritable()
		socket.getpeername()
		socket.getsockname()
		socket.getsockopt(level, optname[, buflen])
		socket.gettimeout()
		socket.ioctl(control, option)
		socket.listen([backlog])
		socket.makefile(mode='r', buffering=None, *, encoding=None, errors=None, newline=None)
		socket.recv(bufsize[, flags])
		socket.recvfrom(bufsize[, flags])
		socket.recvmsg(bufsize[, ancbufsize[, flags]])
		socket.recvmsg_into(buffers[, ancbufsize[, flags]])
		socket.recvfrom_into(buffer[, nbytes[, flags]])
		socket.recv_into(buffer[, nbytes[, flags]])
		socket.send(bytes[, flags])
		socket.sendall(bytes[, flags])
		socket.sendto(bytes, address)
		socket.sendto(bytes, flags, address)
		socket.sendmsg(buffers[, ancdata[, flags[, address]]])
		socket.sendfile(file, offset=0, count=None)
		socket.set_inheritable(inheritable)
		socket.setblocking(flag)
		sock.setblocking(True) is equivalent to sock.settimeout(None)
		sock.setblocking(False) is equivalent to sock.settimeout(0.0)
		socket.settimeout(value)
		socket.setsockopt(level, optname, value)
		socket.shutdown(how)
		socket.share(process_id)
		socket.family
		socket.type
		socket.proto

18.1.4. Notes on socket timeouts
	socket object in one of three modes: 
		1. blocking
		2. non-blocking
		3. timeout
	Sockets default always created in blocking mode
		- changed by calling setdefaulttimeout()

	Blocking mode
		- operations block until complete or the system returns an error (such as connection timed out)

	Non-blocking mode
		- operations fail (with an error that is unfortunately system-dependent) 
		  if they cannot be completed immediately: 
		  functions from the select can be used to know when and whether a socket is available for 
		  reading or writing

	Timeout mode
		- operations fail if they cannot be completed within the timeout specified for the socket 
		  (they raise a timeout exception) or if the system returns an error

	Note At the operating system level, sockets in timeout mode are internally set in non-blocking mode. 
	Also, the blocking and timeout modes are shared between file descriptors and socket objects that refer 
	to the same network endpoint. 
	This implementation detail can have visible consequences if e.g. you decide to use the fileno() of a socket.

18.1.4.1. Timeouts and the connect method
	The connect() operation is also subject to the timeout setting, and in general it is recommended to call 
	settimeout() before calling connect() or pass a timeout parameter to create_connection(). 
	However, the system network stack may also return a connection timeout error of its own regardless of 
	any Python socket timeout setting.

18.1.4.2. Timeouts and the accept method
	If getdefaulttimeout() is not None, sockets returned by the accept() method inherit that timeout. 
	Otherwise, the behaviour depends on settings of the listening socket:
	- if the listening socket is in blocking mode or in timeout mode, the socket returned by accept() is 
	  in blocking mode
	  
	- if the listening socket is in non-blocking mode, whether the socket returned by accept() is 
	  in blocking or non-blocking mode is operating system-dependent. 
	  If you want to ensure cross-platform behaviour, it is recommended you manually override this setting.
	  
EXAMPLES
		
